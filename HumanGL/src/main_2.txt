

#include <string>

#include "Core.hpp"

struct Vertex
{
    float position[3];

};

// Função para criar um cubo
MeshBuffer *CreateCube()
{

    Vertex vertices[] = {
        // Front
        {{-0.5f, -0.5f, 0.5f}}, // 0
        {{0.5f, -0.5f, 0.5f}},  // 1
        {{0.5f, 0.5f, 0.5f}},   // 2
        {{-0.5f, 0.5f, 0.5f}},  // 3

        // Bakc
        {{-0.5f, -0.5f, -0.5f}}, // 4
        {{0.5f, -0.5f, -0.5f}},  // 5
        {{0.5f, 0.5f, -0.5f}},   // 6
        {{-0.5f, 0.5f, -0.5f}}   // 7
    };

    // Definir os índices para desenhar as faces do cubo (36 índices: 6 faces * 2 triângulos * 3 vértices)
    unsigned int indices[] = {
        // Frente
        0, 1, 2,
        0, 2, 3,
        // Direita
        1, 5, 6,
        1, 6, 2,
        // Trás
        5, 4, 7,
        5, 7, 6,
        // Esquerda
        4, 0, 3,
        4, 3, 7,
        // Topo
        3, 2, 6,
        3, 6, 7,
        // Base
        4, 5, 1,
        4, 1, 0};

    VertexFormat format;
    format.addElement(VertexType::POSITION, 3); // x, y, z
    //format.addElement(VertexType::COLOR, 4);    // r, g, b, a

    MeshBuffer *mesh = new MeshBuffer();

    mesh->CreateVertexBuffer(format, 8);
    mesh->SetVertexData(vertices);

    mesh->CreateIndexBuffer(36);
    mesh->SetIndexData(indices);

    return mesh;
}

    // class Humanoid
    // {
    // private:
    //     MeshBuffer *cubeMesh;
    //     MatrixStack matrixStack;
    //     float armRotation = 0.0f;
    //     float legRotation = 0.0f;
    //     float headRotation =0.0;

    // public:
    //     Humanoid()
    //     {
    //         cubeMesh = CreateCube();
    //     }

    //     ~Humanoid()
    //     {
    //         if (cubeMesh)
    //         {
    //             delete cubeMesh;
    //         }
    //     }

    //     void render(Shader & shader)
    //     {
    //         matrixStack.identity();

    //         matrixStack.push();
    //         matrixStack.translate(0.0f, 2.0f, 0.0f);

    //         // Corpo principal (torso)
    //         matrixStack.push();
    //         matrixStack.scale(1.0f, 1.5f, 0.5f);
    //         renderCube(shader,matrixStack.top());
    //         matrixStack.pop();

    //         // Cabeça
    //         matrixStack.push();
    //         matrixStack.translate(0.0f, 1.0f, 0.0f);
    //         matrixStack.rotateY(-headRotation);
    //         matrixStack.scale(0.7f, 0.7f, 0.7f);
    //         renderCube(shader,matrixStack.top());
    //         matrixStack.pop();

    //         // Braço direito
    //         matrixStack.push();
    //         matrixStack.translate(0.7f, 0.75f, 0.0f);
    //         matrixStack.rotateX(-armRotation);
    //          matrixStack.translate(0.0f, -0.6f, 0.0f);
    //         matrixStack.scale(0.4f, 1.2f, 0.4f);
    //         renderCube(shader,matrixStack.top());
    //         matrixStack.pop();

    //         // Braço esquerdo
    //         matrixStack.push();
    //         matrixStack.translate(-0.7f, 0.75f, 0.0f);
    //         matrixStack.rotateX(armRotation);
    //         matrixStack.translate(0.0f, -0.6f, 0.0f);
    //         matrixStack.scale(0.4f, 1.2f, 0.4f);
    //         renderCube(shader,matrixStack.top());
    //         matrixStack.pop();

    //         // Perna direita
    //         matrixStack.push();
    //         matrixStack.translate(0.3f, -0.75f, 0.0f);
    //         matrixStack.rotateX(legRotation);
    //         matrixStack.translate(0.0f, -0.6f, 0.0f);
    //         matrixStack.scale(0.4f, 1.2f, 0.4f);
    //         renderCube(shader,matrixStack.top());

    //         // Pé direito
    //         matrixStack.push();
    //         matrixStack.translate(0.0f, -0.6f, 0.4f);
    //         matrixStack.scale(1.0f, 0.3f, 1.7f);  // Pé mais largo e comprido
    //         renderCube(shader, matrixStack.top());
    //         matrixStack.pop();
    //         matrixStack.pop();

    //         // Perna esquerda
    //         matrixStack.push();
    //         matrixStack.translate(-0.3f, -0.75f, 0.0f);
    //         matrixStack.rotateX(-legRotation);
    //         matrixStack.translate(0.0f, -0.6f, 0.0f);
    //         matrixStack.scale(0.4f, 1.2f, 0.4f);
    //         renderCube(shader,matrixStack.top());
    //       // Pé esquerdo
    //         matrixStack.push();
    //         matrixStack.translate(0.0f, -0.6f, 0.4f);
    //         matrixStack.scale(1.0f, 0.3f, 1.7f);  // Pé mais largo e comprido
    //         renderCube(shader, matrixStack.top());
    //         matrixStack.pop();
    //         matrixStack.pop();

    //         matrixStack.pop();///todo

    //     }

    //     void animate(float deltaTime)
    //     {

    //         const float animSpeed = 2.0f;
    //         const float maxRotation = 45.0f * (3.14159f / 180.0f); // 45 graus em radianos

    //         armRotation = maxRotation * sin(deltaTime * animSpeed);
    //         legRotation = maxRotation * sin(deltaTime * animSpeed);
    //         headRotation = maxRotation * cos(deltaTime * animSpeed);
    //     }

    // private:
    //     void renderCube(Shader & shader, const Mat4 &mat)
    //     {
    //         shader.SetMatrix4("model", mat.m);
    //         cubeMesh->Render(static_cast<int>(PrimitiveType::TRIANGLES), 36);
    //     }
    // };

    class Humanoid
    {
    private:
        MeshBuffer *cubeMesh;
        MatrixStack matrixStack;

        // Ângulos de rotação para cada parte
        float torsoRotation = 0.0f;
        float headRotation = 0.0f;

        // Braços
        float upperArmRotation[2] = {0.0f, 0.0f}; // [0] = esquerdo, [1] = direito
        float forearmRotation[2] = {0.0f, 0.0f};  // [0] = esquerdo, [1] = direito

        // Pernas
        float thighRotation[2] = {0.0f, 0.0f}; // [0] = esquerda, [1] = direita
        float calfRotation[2] = {0.0f, 0.0f};  // [0] = esquerda, [1] = direita

    public:

            Humanoid()
        {
            cubeMesh = CreateCube();
        }

        ~Humanoid()
        {
            if (cubeMesh)
            {
                delete cubeMesh;
            }
        }

        void render(Shader &shader)
        {
            matrixStack.identity();

            matrixStack.translate( 0.0f,2.0f,0.0f);

            // Rotação principal do torso
            matrixStack.rotateY(torsoRotation);

            // Torso - todas as outras partes serão relativas a ele
            matrixStack.push();
            matrixStack.scale(1.0f, 1.6f, 0.5f);
            renderCube(shader, matrixStack.top(),Color(45, 100, 25));
            matrixStack.pop();

            // Cabeça - relativa ao torso
            matrixStack.push();
            matrixStack.translate(0.0f, 1.4f, 0.0f);
            matrixStack.rotateY(headRotation);
            matrixStack.scale(0.7f, 0.7f, 0.7f);
            renderCube(shader, matrixStack.top(),Color(255, 224, 185));
            matrixStack.pop();

            // Braços
            for (int side = 0; side < 2; side++)
            { // 0 = esquerdo, 1 = direito
                float sideSign = (side == 0) ? -1.0f : 1.0f;

                // Upper arm - relativo ao torso
                matrixStack.push();
                matrixStack.translate(sideSign * 0.7f, 0.75f, 0.0f);
                matrixStack.rotateX(upperArmRotation[side]);

                // Renderiza upper arm
                matrixStack.push();
                matrixStack.translate(0.0f, -0.3f, 0.0f);
                matrixStack.scale(0.4f, 0.6f, 0.4f);
                renderCube(shader, matrixStack.top(),Color(255, 224, 185));
                matrixStack.pop();

                // Forearm - relativo ao upper arm
                matrixStack.translate(0.0f, -0.6f, 0.0f);
                matrixStack.rotateX(forearmRotation[side]);
                matrixStack.translate(0.0f, -0.3f, 0.0f);
                matrixStack.scale(0.3f, 0.6f, 0.3f);
                renderCube(shader, matrixStack.top(),Color(255, 224, 185));

                matrixStack.pop();
            }

            // Pernas
            for (int side = 0; side < 2; side++)
            { // 0 = esquerda, 1 = direita
                float sideSign = (side == 0) ? -1.0f : 1.0f;

                // Thigh - relativo ao torso
                matrixStack.push();
                matrixStack.translate(sideSign * 0.3f, -0.85f, 0.0f);
                matrixStack.rotateX(thighRotation[side]);

                // Renderiza thigh
                matrixStack.push();
                matrixStack.translate(0.0f, -0.3f, 0.0f);
                matrixStack.scale(0.4f, 0.8f, 0.4f);
                renderCube(shader, matrixStack.top(),Color::BLUE);
                matrixStack.pop();

                // Calf - relativo ao thigh
                matrixStack.translate(0.0f, -0.6f, 0.0f);
                matrixStack.rotateX(calfRotation[side]);
                matrixStack.translate(0.0f, -0.3f, 0.0f);
                matrixStack.scale(0.35f, 0.6f, 0.35f);
                renderCube(shader, matrixStack.top(),Color::BLUE);

                matrixStack.pop();
            }
        }

  
        void setTorsoRotation(float angle) { torsoRotation = angle; }
        void setHeadRotation(float angle) { headRotation = angle; }

        void setUpperArmRotation(bool isRight, float angle)
        {
            upperArmRotation[isRight ? 1 : 0] = angle;
        }

        void setForearmRotation(bool isRight, float angle)
        {
            forearmRotation[isRight ? 1 : 0] = angle;
        }

        void setThighRotation(bool isRight, float angle)
        {
            thighRotation[isRight ? 1 : 0] = angle;
        }

        void setCalfRotation(bool isRight, float angle)
        {
            calfRotation[isRight ? 1 : 0] = angle;
        }

        void animate(float deltaTime)
        {
            const float animSpeed = 2.0f;
            const float maxRotation = 45.0f * (3.14159f / 180.0f);

            float cycle = sin(deltaTime * animSpeed);

            // Braços e pernas em movimento alternado
            setUpperArmRotation(true, -cycle * maxRotation);
            setUpperArmRotation(false, cycle * maxRotation);

            setForearmRotation(true, -abs(cycle) * maxRotation * 0.5f);
            setForearmRotation(false, -abs(cycle) * maxRotation * 0.5f);

            setThighRotation(true, cycle * maxRotation);
            setThighRotation(false, -cycle * maxRotation);

            setCalfRotation(true, abs(cycle) * maxRotation * 0.5f);
            setCalfRotation(false, abs(cycle) * maxRotation * 0.5f);
        }

    private:
        void renderCube(Shader &shader, const Mat4 &modelMatrix,const Color &color)
        {
            shader.SetMatrix4("model", modelMatrix.m);
            float r = color.r / 255.0f;
            float g = color.g / 255.0f;
            float b = color.b / 255.0f;
            
            shader.SetFloat("difusse",r,g,b);
            cubeMesh->Render(static_cast<int>(PrimitiveType::TRIANGLES), 36);
        }
    };

    int main(int argc, char *argv[])
    {
        Device *window = Device::GetInstance();

        bool ABORT = false;

        if (!window->Init("HumanGL BY Luis Santos AK DJOKER", 800, 600))
        {
            return 1;
        }

        RenderBatch batch;
        batch.Init(1, 1024);
        Shader shader;
        Shader shaderCube;
        Font font;
        MeshBuffer *cube = CreateCube();

        {
            const char *vShader = GLSL(
                layout(location = 0) in vec3 position;
                layout(location = 1) in vec2 texCoord;
                layout(location = 2) in vec4 color;

                uniform mat4 model;
                uniform mat4 view;
                uniform mat4 projection;

                out vec2 TexCoord;
                out vec4 vertexColor;
                void main() {
                    gl_Position = projection * view * model * vec4(position, 1.0);
                    TexCoord = texCoord;
                    vertexColor = color;
                });

            const char *fShader = GLSL(
                in vec2 TexCoord;
                out vec4 color;
                in vec4 vertexColor;
                uniform sampler2D texture0;
                void main() {
                    color = texture(texture0, TexCoord) * vertexColor;
                });

            shader.Create(vShader, fShader);
            shader.LoadDefaults();
        }

        {
            const char *vShader = GLSL(
                layout(location = 0) in vec3 position;
          

                uniform mat4 model;
                uniform mat4 view;
                uniform mat4 projection;

                void main() {
                    gl_Position = projection * view * model * vec4(position, 1.0);
           
                });

            const char *fShader = GLSL(
                out vec4 color;
                uniform vec3 difusse;
                void main() {
                    color = vec4(difusse,1.0);
                });

            if (!shaderCube.Create(vShader, fShader))
            {
               ABORT=true;
            }
            shaderCube.LoadDefaults();
        }

        font.LoadDefaultFont();
        font.SetBatch(&batch);
        font.SetSize(12);

        Camera camera(800.0f / 600.0f);

        Driver::Instance().SetClearColor(0.2f, 0.3f, 0.3f, 1.0);

        float cameraSpeed = 0.5f;
        float mouseSensitivity = 0.1f;

        Humanoid human;

        float time = 0.0f;


    GUI *widgets = GUI::Instance();

    Window *window1 = widgets->CreateWindow("Mesh Transform", 10, 360, 300, 350);

    // window1->CreateLabel("yaw",   10, 30);
    // window1->CreateLabel("pitch", 10, 74);
    // window1->CreateLabel("roll",  10, 114);

    // Slider *sliderYaw   = window1->CreateSlider(false, 10, 50, 200, 20, 0, 360, 0);
    // Slider *sliderPitch = window1->CreateSlider(false, 10, 90, 200, 20, 0, 360, 0);
    // Slider *sliderRoll  = window1->CreateSlider(false, 10, 130, 200, 20, 0, 360, 0);

    // Slider *colorLerp = window1->CreateSlider(false, 10, 300, 160, 20, 0, 1, 0.5);
    // Button *buttonLerp = window1->CreateButton("Swicth", 200, 300, 80, 20);
    // buttonLerp->SetkeyMap(true,SDLK_t);

    // Button *moveLeft = window1->CreateButton("move - x", 10, 170, 100, 20);
    // moveLeft->SetkeyMap(true,SDLK_LEFT);
    // Button *moveRight = window1->CreateButton("move + x", 120, 170, 100, 20);
    // moveRight->SetkeyMap(true,SDLK_RIGHT);
    
    // Button *moveUp = window1->CreateButton("move - y", 10, 200, 100, 20);
    // moveUp->SetkeyMap(true,SDLK_UP);
    // Button *moveDown = window1->CreateButton("move + y", 120, 200, 100, 20);
    // moveDown->SetkeyMap(true,SDLK_DOWN);

    // Button *moveFront = window1->CreateButton("move - z", 10, 230, 100, 20);
    // moveFront->SetkeyMap(true,SDLK_PAGEUP);
    // Button *moveBack = window1->CreateButton("move + z", 120, 230, 100, 20);
    // moveBack->SetkeyMap(true,SDLK_PAGEDOWN);

    // Button *reset = window1->CreateButton("reset", 50, 260, 100, 20);
    
    // Window *window2 = widgets.CreateWindow("Mesh Tool", SCREEN_WIDTH-160, 24, 150, 190);

    // Button *buttonUv= window2->CreateButton("Uv", 10, 50, 100, 20);
    // Slider *sliderUv = window2->CreateSlider(false, 10, 20, 100, 20, 0.01f, 5.0f, 1.0f);

    // Button *buttonCenter= window2->CreateButton("Center Mesh", 10, 100, 100, 20);
    // Button *buttonShades= window2->CreateButton("Shades/Gray", 10, 130, 100, 20);
    // CheckBox *backFaces = window2->CreateCheckBox("Back Faces", true, 10, 160, 20, 20);




        while (window->Running())
        {
            if (ABORT) break;

            float delta = window->GetFrameTime();
            widgets->Update(delta);

            


            if (Input::IsKeyDown(SDLK_W))
            {
                camera.move(cameraSpeed);
            }
            else if (Input::IsKeyDown(SDLK_S))
            {
                camera.move(-cameraSpeed);
            }

            if (Input::IsKeyDown(SDLK_A))
            {
                camera.strafe(-cameraSpeed);
            }
            else if (Input::IsKeyDown(SDLK_D))
            {
                camera.strafe(cameraSpeed);
            }

            if (Input::IsMouseButtonDown(SDL_BUTTON_LEFT) && !(widgets->Focus()))
            {
                int x = Input::GetMouseDeltaX();
                int y = Input::GetMouseDeltaY();
                camera.rotate(x, -y, mouseSensitivity);
            }

            Driver::Instance().SetBlend(false);
            Driver::Instance().SetDepthTest(true);
            Driver::Instance().SetDepthWrite(true);
            Driver::Instance().Clear();

            glViewport(0, 0, window->GetWidth(), window->GetHeight());

            Mat4 projection = camera.getProjectionMatrix();
            Mat4 view = camera.getViewMatrix();
            camera.setAspectRatio(window->GetWidth() / window->GetHeight());

            Mat4 identity = Mat4::Identity();

            // Render Scene

            shaderCube.Use();
            shaderCube.SetMatrix4("model", identity.m);
            shaderCube.SetMatrix4("view", view.m);
            shaderCube.SetMatrix4("projection", projection.m);

            //  cube->Render(static_cast<int>(PrimitiveType::TRIANGLES), 36);

            human.render(shaderCube);

            time += 0.016f; // Aproximadamente 60 FPS

            human.animate(time);

            // Render 3d Batch

            shader.Use();
            shader.SetMatrix4("model", identity.m);
            shader.SetMatrix4("view", view.m);
            shader.SetMatrix4("projection", projection.m);
            batch.SetColor(255, 255, 255, 255);

            batch.Grid(10, 10);
            batch.Render();

            // Render 2d STUFF

            projection = Mat4::Ortho(0.0f, window->GetWidth(), window->GetHeight(), 0.0f, -1.0f, 1.0f);
            Driver::Instance().SetBlend(true);
            Driver::Instance().SetBlendMode(BlendMode::BLEND);
            Driver::Instance().SetDepthTest(false);
            Driver::Instance().SetDepthWrite(false);

            shader.Use();
            shader.SetMatrix4("model", identity.m);
            shader.SetMatrix4("view", identity.m);
            shader.SetMatrix4("projection", projection.m);
            batch.SetColor(255, 255, 255, 255);


           
            widgets->Render(&batch);

            font.Print(10, 20, "FPS %d Focus %d", window->GetFPS(),(widgets->Focus()?1:0));

            batch.Render();

            window->Swap();
        }

        widgets->Clear();
        cube->Release();
        delete cube;
        font.Release();
        batch.Release();
        shader.Release();
        shaderCube.Release();

        Device::DestroyInstance();
        return 0;
    }